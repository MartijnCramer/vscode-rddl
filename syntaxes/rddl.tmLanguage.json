{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "RDDL",
	"fileTypes": [
		"rddl", "rddl2"
	  ],
	"patterns": [
		{
			"include": "#keyword"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#entity"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#constant"
		}
	],
	"repository": {
		"keyword": {
			"patterns": [
				{
					"match": "\\b(if|then|else|else if|while|for|switch|default)\\b",
					"name": "keyword.control.rddl"
				},
				{
                    "match": "\\s(\\^|\\||=>|<=>)\\s",
                    "name": "keyword.operator.logical.rddl"
				},
				{
                    "match": "\\~(?=[a-zA-Z])",
                    "name": "keyword.operator.logical.rddl"
				},
				{
                    "match": "\\b(forall_|exists_)(?={)",
                    "name": "keyword.operator.logical.rddl"
                },
				{
                    "match": "\\s(~=|<=|>=|==|<|>)\\s",
                    "name": "keyword.operator.comparison.rddl"
				},
				{
                    "match": "\\s=\\s",
                    "name": "keyword.operator.assignment.rddl"
				},
				{
                    "match": "\\s(\\*|-|\\+)\\s",
                    "name": "keyword.operator.rddl"
				},
				{
                    "match": "-(?=\\d)",
                    "name": "keyword.operator.rddl"
				},
				{
                    "match": "\\s(?<!\/)\/(?!\/)\\s",
                    "name": "keyword.operator.rddl"
				},
				{
                    "match": "\\b(sum_|prod_)(?={)",
                    "name": "keyword.operator.rddl"
				}
			]
		},
		"punctuation": {
            "patterns": [
                {
                    "match": ";",
					"name": "punctuation.terminator.statement.rddl"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.delimiter.rddl"
				},
				{
                    "match": ":",
                    "name": "punctuation.separator.colon.rddl"
				},
				{
                    "match": "\\?\\w*",
                    "name": "punctuation.definition.variable.rddl"
				}
            ]
		},
		"storage": {
            "patterns": [
                {
                    "match": "\\b(int|real|bool|object)\\b",
					"name": "storage.type.rddl"
				},
				{
                    "match": "\\b(state-fluent|non-fluent|action-fluent|interm-fluent|observ-fluent)\\b",
					"name": "storage.type.fluent.rddl"
				},
				{
                    "match": "^(domain|non-fluents|instance)(?=\\s+[a-zA-Z])",
					"name": "storage.type.class.rddl"
				},
				{
                    "match": "\\b(types|pvariables|cpfs|cdfs|state-action-constraints|reward|non-fluents|objects|init-state|action-preconditions)(?=\\s*{)",
					"name": "storage.type.struct.rddl"
				},
				{
                    "match": "\\b(requirements)(?=\\s*=\\s*{)",
					"name": "storage.type.struct.rddl"
				},
				{
                    "match": "\\b(reward)(?=\\s*=)",
					"name": "storage.type.struct.rddl"
				}
            ]
		},
		"entity": {
			"patterns": [
				{
					"match": "\\b(KronDelta|DiracDelta|Bernoulli|Discrete|Normal|Poisson)(?=\\s*)",
					"name": "entity.name.function.probdist.rddl"
				},
				{
                    "match": "(?!(for|if|switch|while|else if))(?>[a-zA-Z_][-a-zA-Z_]*(\\w+))(?=\\()",
                    "name": "entity.name.function.rddl"
                },
				{
                    "match": "(?!(for|if|switch|while|else if))(?>[a-zA-Z_][-a-zA-Z_]*(\\w+)')(?=\\()",
                    "name": "entity.name.function.time.rddl"
                }
			]
		},
		"comment": {
			"patterns": [
				{
					"match": "(\/\/.*)",
					"name": "comment.line.double-slash.rddl"
				}
			]
		},
		"constant": {
			"patterns": [
				{
					"match": "\\b(true|false)\\b",
					"name": "constant.language.rddl"
				},
				{
					"match": "\\b((0(x|X)[0-9a-fA-F]([0-9a-fA-F']*[0-9a-fA-F])?)|(0(b|B)[01]([01']*[01])?)|(([0-9]([0-9']*[0-9])?\\.?[0-9]*([0-9']*[0-9])?)|(\\.[0-9]([0-9']*[0-9])?))((e|E)(\\+|-)?[0-9]([0-9']*[0-9])?)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
					"name": "constant.numeric.rddl"
				}
			]
		}
	},
	"scopeName": "source.rddl"
}